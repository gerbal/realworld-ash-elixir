defmodule Realworld.Repo.Migrations.MigrateResources1 do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :username, :text, null: false
      add :hashed_password, :text
      add :confirmed_at, :utc_datetime_usec
      add :bio, :text
      add :image, :text
      add :email, :citext, null: false
      add :createdAt, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updatedAt, :utc_datetime_usec, null: false, default: fragment("now()")
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create unique_index(:users, [:username], name: "users_unique_username_index")

    create table(:user_tokens, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :token, :binary
      add :context, :text
      add :sent_to, :text
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")

      add :user_id,
          references(:users,
            column: :id,
            name: "user_tokens_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create unique_index(:user_tokens, [:context, :token], name: "user_tokens_token_context_index")

    create table(:user_favorites, primary_key: false) do
      add :user_id,
          references(:users,
            column: :id,
            name: "user_favorites_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false

      add :article_id, :uuid, null: false, primary_key: true
    end

    create table(:tags, primary_key: false) do
      add :id, :text, null: false, primary_key: true
    end

    create table(:comments, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true
      add :body, :text, null: false
      add :author_id, :uuid, null: false
      add :createdAt, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updatedAt, :utc_datetime_usec, null: false, default: fragment("now()")
      add :article_id, :uuid
    end

    create table(:articles, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
    end

    alter table(:user_favorites) do
      modify :article_id,
             references(:articles,
               column: :id,
               prefix: "public",
               name: "user_favorites_article_id_fkey",
               type: :uuid
             )
    end

    alter table(:comments) do
      modify :article_id,
             references(:articles,
               column: :id,
               prefix: "public",
               name: "comments_article_id_fkey",
               type: :uuid
             )
    end

    alter table(:articles) do
      add :slug, :citext, null: false
      add :title, :text
      add :description, :text
      add :body, :text
      add :author_id, :uuid
      add :favorited, :boolean
      add :createdAt, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updatedAt, :utc_datetime_usec, null: false, default: fragment("now()")
    end

    create unique_index(:articles, [:slug], name: "articles_unique_slug_index")

    create table(:article_tags, primary_key: false) do
      add :tag_id,
          references(:tags,
            column: :id,
            name: "article_tags_tag_id_fkey",
            type: :text,
            prefix: "public"
          ),
          primary_key: true,
          null: false

      add :article_id,
          references(:articles,
            column: :id,
            name: "article_tags_article_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          primary_key: true,
          null: false
    end
  end

  def down do
    drop constraint(:article_tags, "article_tags_article_id_fkey")

    drop constraint(:article_tags, "article_tags_tag_id_fkey")

    drop table(:article_tags)

    drop_if_exists unique_index(:articles, [:slug], name: "articles_unique_slug_index")

    alter table(:articles) do
      remove :updatedAt
      remove :createdAt
      remove :favorited
      remove :author_id
      remove :body
      remove :description
      remove :title
      remove :slug
    end

    drop constraint(:comments, "comments_article_id_fkey")

    alter table(:comments) do
      modify :article_id, :uuid
    end

    drop constraint(:user_favorites, "user_favorites_article_id_fkey")

    alter table(:user_favorites) do
      modify :article_id, :uuid
    end

    drop table(:articles)

    drop table(:comments)

    drop table(:tags)

    drop constraint(:user_favorites, "user_favorites_user_id_fkey")

    drop table(:user_favorites)

    drop_if_exists unique_index(:user_tokens, [:context, :token],
                     name: "user_tokens_token_context_index"
                   )

    drop constraint(:user_tokens, "user_tokens_user_id_fkey")

    drop table(:user_tokens)

    drop_if_exists unique_index(:users, [:username], name: "users_unique_username_index")

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)
  end
end
