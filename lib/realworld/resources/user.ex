defmodule Realworld.Resources.User do
  use Ash.Resource, data_layer: AshPostgres.DataLayer, extensions: [AshJsonApi.Resource]

  alias Realworld.Resources.Preparations, warn: false
  alias Realworld.Resources.User.Preparations, as: UserPreparations, warn: false
  alias Realworld.Resources.User.Changes, warn: false
  alias Realworld.Resources.User.Validations, warn: false

  identities do
    identity :unique_email, [:email]
    identity :unique_username, [:username]
  end

  postgres do
    table "users"
    repo Realworld.Repo
  end

  actions do
    defaults [:read]

    read :by_email_and_password do
      argument :email, :string, allow_nil?: false, sensitive?: true
      argument :password, :string, allow_nil?: false, sensitive?: true

      prepare UserPreparations.ValidatePassword

      filter expr(email == ^arg(:email))
    end

    read :by_token do
      argument :token, :url_encoded_binary, allow_nil?: false
      argument :context, :string, allow_nil?: false
      prepare Preparations.DetermineDaysForToken

      filter expr(
               token.token == ^arg(:token) and token.context == ^arg(:context) and
                 token.created_at > ago(^context(:days_for_token), :day)
             )
    end

    read :with_verified_email_token do
      argument :token, :url_encoded_binary, allow_nil?: false
      argument :context, :string, allow_nil?: false

      prepare Preparations.SetHashedToken
      prepare Preparations.DetermineDaysForToken

      filter expr(
               token.created_at > ago(^context(:days_for_token), :day) and
                 token.token == ^context(:hashed_token) and token.context == ^arg(:context) and
                 token.sent_to == email
             )
    end

    create :register do
      primary? true

      # By default all public attributes are accepted, but this should only take email
      accept [:email, :username]

      # Accept additional input by adding arguments
      argument :password, :string,
        allow_nil?: false,
        constraints: [
          max_length: 80,
          min_length: 12
        ]

      argument :password_confirmation, :string, allow_nil?: false

      # Use the built in `confirm/2` validation
      validate confirm(:password, :password_confirmation)

      # Call a custom change that will hash the password
      change Changes.HashPassword
    end

    update :deliver_user_confirmation_instructions do
      accept []

      argument :confirmation_url_fun, :function do
        constraints arity: 1
        allow_nil? false
      end

      validate attribute_equals(:confirmed_at, nil), message: "already confirmed"
      change Changes.CreateEmailConfirmationToken
    end

    update :deliver_update_email_instructions do
      accept [:email]

      argument :current_password, :string, allow_nil?: false

      argument :update_url_fun, :function do
        constraints arity: 1
        allow_nil? false
      end

      validate Validations.ValidateCurrentPassword
      validate changing(:email)

      change prevent_change(:email)
      change Changes.CreateEmailUpdateToken
    end

    update :deliver_user_reset_password_instructions do
      accept []

      argument :reset_password_url_fun, :function do
        constraints arity: 1
        allow_nil? false
      end

      change Changes.CreateResetPasswordToken
    end

    update :logout do
      accept []

      change Changes.RemoveAllTokens
    end

    update :change_email do
      accept []
      argument :token, :url_encoded_binary

      change Changes.GetEmailFromToken
      change Changes.DeleteEmailChangeTokens
    end

    update :change_password do
      accept []

      argument :password, :string,
        allow_nil?: false,
        constraints: [
          max_length: 80,
          min_length: 12
        ]

      argument :password_confirmation, :string, allow_nil?: false
      argument :current_password, :string

      validate confirm(:password, :password_confirmation)
      validate Validations.ValidateCurrentPassword

      change Changes.HashPassword
      change Changes.RemoveAllTokens
    end

    update :confirm do
      accept []
      argument :delete_confirm_tokens, :boolean, default: false

      change set_attribute(:confirmed_at, &DateTime.utc_now/0)
      change Changes.DeleteConfirmTokens
    end
  end

  # Attributes are the simple pieces of data that exist on your resource
  attributes do
    # Add an autogenerated UUID primary key called `:id`.
    uuid_primary_key :id

    # Add a string type attribute called `:subject`
    attribute :username, :string, allow_nil?: false, writable?: false
    attribute :hashed_password, :string, private?: true
    attribute :confirmed_at, :utc_datetime_usec

    attribute :bio, :string
    attribute :image, :string

    attribute :email, :ci_string,
      allow_nil?: false,
      constraints: [
        max_length: 160
      ]

    create_timestamp :createdAt
    update_timestamp :updatedAt
  end

  relationships do
    many_to_many :favorites, Realworld.Resources.Article do
      through Realworld.Resources.UserFavorite
      source_attribute_on_join_resource :user_id
      destination_attribute_on_join_resource :article_id
    end

    many_to_many :follows, Realworld.Resources.User do
      through Realworld.Resources.UserFollower
      source_attribute_on_join_resource :user_id
      destination_attribute_on_join_resource :follower_id
    end

    has_many :comments, Realworld.Resources.Comment, destination_attribute: :author_id

    has_many :articles, Realworld.Resources.Article, destination_attribute: :author_id

    has_one :token, Realworld.Resources.UserToken,
      destination_attribute: :user_id,
      private?: true
  end

  validations do
    validate match(:email, ~r/^[^\s]+@[^\s]+$/), description: "must have the @ sign and no spaces"
  end

  json_api do
    type "user"

    includes([
      :favorites,
      :comments,
      :articles
    ])

    routes do
      base "/profiles"

      primary_key do
        keys [:username]
      end

      get :read
      post_to_relationship :follows
      delete_from_relationship :follows
    end
  end
end
